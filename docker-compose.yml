version: '3.4'

services:
  php:
    image: ${CONTAINER_REGISTRY_BASE}/php
    container_name: esgi-apiplaform-php
    build:
      context: ./api
      target: api_platform_php
      cache_from:
        - ${CONTAINER_REGISTRY_BASE}/php
        - ${CONTAINER_REGISTRY_BASE}/nginx
        - ${CONTAINER_REGISTRY_BASE}/varnish
    depends_on:
      - db
    env_file:
      - ./api/.env
    # Comment out these volumes in production
    volumes:
       - ./api:/srv/api:rw,cached
      # If you develop on Linux, uncomment the following line to use a bind-mounted host directory instead
#      - ./api/var:/srv/api/var:rw

  api:
    image: ${CONTAINER_REGISTRY_BASE}/nginx
    container_name: esgi-apiplaform-api
    build:
      context: ./api
      target: api_platform_nginx
      cache_from:
        - ${CONTAINER_REGISTRY_BASE}/php
        - ${CONTAINER_REGISTRY_BASE}/nginx
        - ${CONTAINER_REGISTRY_BASE}/varnish
    depends_on:
      - php
    # Comment out this volume in production
    volumes:
      - ./api/public:/srv/api/public:ro

  cache-proxy:
    image: ${CONTAINER_REGISTRY_BASE}/varnish
    container_name: esgi-apiplaform-cache-proxy
    build:
      context: ./api
      target: api_platform_varnish
      cache_from:
        - ${CONTAINER_REGISTRY_BASE}/php
        - ${CONTAINER_REGISTRY_BASE}/nginx
        - ${CONTAINER_REGISTRY_BASE}/varnish
    depends_on:
      - api
    volumes:
      - ./api/docker/varnish/conf:/usr/local/etc/varnish:ro
    tmpfs:
      - /usr/local/var/varnish:exec

  db:
    # In production, you may want to use a managed database service
    image: postgres:9.6-alpine
    container_name: esgi-apiplaform-db
    environment:
      - POSTGRES_DB=api
      - POSTGRES_USER=api-platform
      # You should definitely change the password in production
      - POSTGRES_PASSWORD=!ChangeMe!
    volumes:
       - db-data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
#      - ./docker/db/data:/var/lib/postgresql/data:rw
    ports:
      - "5432:5432"

  client:
    # Use a static website hosting service in production
    # See https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment
    image: ${CONTAINER_REGISTRY_BASE}/client
    container_name: esgi-apiplaform-client
    build:
      context: ./client
      cache_from:
        - ${CONTAINER_REGISTRY_BASE}/client
    env_file:
      - ./client/.env
    volumes:
      - ./client:/usr/src/client:rw,cached
      - /usr/src/client/node_modules

  admin:
    # Use a static website hosting service in production
    # See https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment
    image: ${CONTAINER_REGISTRY_BASE}/admin
    container_name: esgi-apiplaform-admin
    build:
      context: ./admin
      cache_from:
        - ${CONTAINER_REGISTRY_BASE}/admin
    env_file:
      - ./admin/.env
    volumes:
      - ./admin:/usr/src/admin:rw,cached
      - /usr/src/admin/node_modules
      
  php-fpm:
    build:
      context: site/engine/php-fpm
    container_name: esgi-apiplaform-php-fpm
    working_dir: /application
    volumes:
    - ./site:/application
    - ./site/engine/php-fpm/php-ini-overrides.ini:/etc/php/7.2/fpm/conf.d/99-overrides.ini

  site:
    image: nginx:stable
    container_name: esgi-apiplatform-site
    working_dir: /application
    volumes:
      - ./site:/application
      - ./site/engine/nginx/nginx.conf:/etc/nginx/conf.d/default.conf

  h2-proxy:
    # Don't use this proxy in prod
    container_name: esgi-apiplaform-h2-proxy
    build:
      context: ./h2-proxy
    depends_on:
      - client
      - admin
      - api
      - cache-proxy
      - site
      - php-fpm
    ports:
      - "8050:80" #Client HTTP
      - "8051:81" #Admin HTTP
      - "8052:8080" #API HTTP
      - "8053:8081" #Cache-Proxy HTTP
      - "8054:8082" #Site HTTP
    volumes:
      - ./h2-proxy/conf.d:/etc/nginx/conf.d
volumes:
  db-data: {}
